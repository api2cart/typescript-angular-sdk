/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * OpenAPI spec version: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class CartCouponAdd {
    /**
    * Coupon code
    */
    'code': string;
    /**
    * Coupon discount type
    */
    'actionType': CartCouponAddActionTypeEnum;
    /**
    * Defines where discount should be applied
    */
    'actionApplyTo': CartCouponAddActionApplyToEnum;
    /**
    * Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
    */
    'actionScope': CartCouponAddActionScopeEnum;
    /**
    * Defines the discount amount value.
    */
    'actionAmount': number;
    /**
    * Entity codes
    */
    'codes'?: Array<string>;
    /**
    * Coupon name
    */
    'name'?: string;
    /**
    * Date start
    */
    'dateStart'?: string;
    /**
    * Defines when discount code will be expired.
    */
    'dateEnd'?: string;
    /**
    * Usage limit for coupon.
    */
    'usageLimit'?: number;
    /**
    * Usage limit per customer.
    */
    'usageLimitPerCustomer'?: number;
    /**
    * Defines entity for action condition.
    */
    'actionConditionEntity'?: string;
    /**
    * Defines entity attribute code for action condition.
    */
    'actionConditionKey'?: string;
    /**
    * Defines condition operator.
    */
    'actionConditionOperator'?: string;
    /**
    * Defines condition attribute value/s. Can be comma separated string.
    */
    'actionConditionValue'?: string;
    /**
    * Indicates whether to apply a discount for taxes.
    */
    'includeTax'?: boolean;
    /**
    * Store Id
    */
    'storeId'?: string;
    /**
    * Defines whether the coupon provides free cash on delivery
    */
    'freeCashOnDelivery'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "code",
            "baseName": "code",
            "type": "string",
            "format": ""
        },
        {
            "name": "actionType",
            "baseName": "action_type",
            "type": "CartCouponAddActionTypeEnum",
            "format": ""
        },
        {
            "name": "actionApplyTo",
            "baseName": "action_apply_to",
            "type": "CartCouponAddActionApplyToEnum",
            "format": ""
        },
        {
            "name": "actionScope",
            "baseName": "action_scope",
            "type": "CartCouponAddActionScopeEnum",
            "format": ""
        },
        {
            "name": "actionAmount",
            "baseName": "action_amount",
            "type": "number",
            "format": ""
        },
        {
            "name": "codes",
            "baseName": "codes",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateStart",
            "baseName": "date_start",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateEnd",
            "baseName": "date_end",
            "type": "string",
            "format": ""
        },
        {
            "name": "usageLimit",
            "baseName": "usage_limit",
            "type": "number",
            "format": ""
        },
        {
            "name": "usageLimitPerCustomer",
            "baseName": "usage_limit_per_customer",
            "type": "number",
            "format": ""
        },
        {
            "name": "actionConditionEntity",
            "baseName": "action_condition_entity",
            "type": "string",
            "format": ""
        },
        {
            "name": "actionConditionKey",
            "baseName": "action_condition_key",
            "type": "string",
            "format": ""
        },
        {
            "name": "actionConditionOperator",
            "baseName": "action_condition_operator",
            "type": "string",
            "format": ""
        },
        {
            "name": "actionConditionValue",
            "baseName": "action_condition_value",
            "type": "string",
            "format": ""
        },
        {
            "name": "includeTax",
            "baseName": "include_tax",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "storeId",
            "baseName": "store_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "freeCashOnDelivery",
            "baseName": "free_cash_on_delivery",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return CartCouponAdd.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum CartCouponAddActionTypeEnum {
    Percent = 'percent',
    Fixed = 'fixed'
}
export enum CartCouponAddActionApplyToEnum {
    OrderTotal = 'order_total',
    ItemPrice = 'item_price',
    Shipping = 'shipping'
}
export enum CartCouponAddActionScopeEnum {
    Order = 'order',
    MatchingItems = 'matching_items'
}

